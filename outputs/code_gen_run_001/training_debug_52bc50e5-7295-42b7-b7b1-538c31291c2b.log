2025-10-07 08:50:28 - DEBUG - [mlx_rl_trainer.rewards.base_reward:41] - Initialized CodeExecutionReward with config: {'timeout': 3, 'think_open_tag': '<think>', 'think_close_tag': '</think>', 'answer_open_tag': '<answer>', 'answer_close_tag': '</answer>'}
2025-10-07 08:50:28 - INFO - [mlx_rl_trainer.rewards.programming.code_execution:123] - Initialized CodeExecutionReward with timeout: 3s.
2025-10-07 08:50:28 - DEBUG - [mlx_rl_trainer.rewards.registry:85] - Created reward instance: 'code_execution'.
2025-10-07 08:50:28 - DEBUG - [mlx_rl_trainer.rewards.base_reward:41] - Initialized SemanticSimilarityReward with config: {'method': 'tfidf', 'think_open_tag': '<think>', 'think_close_tag': '</think>', 'answer_open_tag': '<answer>', 'answer_close_tag': '</answer>'}
2025-10-07 08:50:28 - DEBUG - [mlx_rl_trainer.rewards.registry:85] - Created reward instance: 'content_similarity'.
2025-10-07 08:50:28 - INFO - [mlx_rl_trainer.rewards.base_reward:137] - Initialized RewardComposer with 2 rewards.
2025-10-07 08:50:28 - INFO - [mlx_rl_trainer.scripts.train:182] - Created reward composer with 2 rewards.
2025-10-07 08:50:28 - INFO - [root:39] - DatasetManager initialized with config: train_path=PosixPath('/Users/adeelahmad/work/SiLLM-examples/helpsteer/mlx-grpo/ooutted_reversald.jsonl') val_path=PosixPath('/Users/adeelahmad/work/SiLLM-examples/helpsteer/mlx-grpo/judge/valid.jsonl') max_prompt_len=512 max_gen_len=384 loader_type='jsonl' shuffle_data=True dataset_prompt_key='prompt' dataset_answer_key='completion' dataset_filter_keywords=['http', 'qwen']
2025-10-07 08:50:28 - INFO - [root:80] - CheckpointManager initialized for outputs/code_gen_run_001/checkpoints. Keeping last 3 checkpoints.
2025-10-07 08:50:28 - INFO - [root:100] - BaseTrainer initialized with injected dependencies.
2025-10-07 08:50:28 - INFO - [mlx_rl_trainer.algorithms.grpo.grpo_trainer:82] - GRPOTrainer initialized for run ID: 2c07f215-b870-4436-82e3-1edac2eab54e.
2025-10-07 08:50:28 - INFO - [root:331] - Attempting to load 'actor' model from /Users/adeelahmad/work/SiLLM-examples/helpsteer/mlx-grpo/outy1266_align_last30/latest...
2025-10-07 08:50:28 - INFO - [root:331] - Attempting to load 'reference' model from /Users/adeelahmad/work/SiLLM-examples/helpsteer/mlx-grpo/outy1266_align_last30/latest...
2025-10-07 08:50:28 - DEBUG - [mlx_rl_trainer.algorithms.base_algorithm:41] - BaseAlgorithm initialized for GRPOAlgorithm.
2025-10-07 08:50:28 - INFO - [root:170] - Training will start from update step 0, epoch 0.
2025-10-07 08:50:39 - WARNING - [root:539] - mlx-lm not available. Using mock generation.
2025-10-07 08:50:39 - DEBUG - [root:271] - {'prompt': 'In the context of Amazon Web Services Cloud, A data scientist uses an Amazon SageMaker notebook instance to conduct data exploration and analysis. This requires certain Python packages that are not natively available on Amazon SageMaker to be installed on the notebook instance. How can a machine learning specialist ensure that required packages are automatically available on the notebook instance for the data scientist to use? Choices: Install AWS Systems Manager Agent on the underlying Amazon EC2 instance and use Systems Manager Automation to execute the package installation commands. Create a Jupyter notebook file (.ipynb) with cells containing the package installation commands to execute and place the file under the /etc/init directory of each Amazon SageMaker notebook instance. Use the conda package manager from within the Jupyter notebook console to apply the necessary conda packages to the default kernel of the notebook. Create an Amazon SageMaker lifecycle configuration with package installation commands and assign the lifecycle configuration to the notebook instance.', 'completion': '', 'test_cases': [], 'is_mcq': False, 'mcq_options': [], 'mcq_correct_letters': '', 'mcq_multi_select': False, 'is_invalid_sample': False}
2025-10-07 08:50:39 - DEBUG - [mlx_rl_trainer.rewards.content.semantic_similarity:79] - Content: Generated or reference text too short or empty. Returning 0.0.
2025-10-07 08:50:39 - DEBUG - [root:271] - {'prompt': 'In the context of Amazon Web Services Cloud, A data scientist uses an Amazon SageMaker notebook instance to conduct data exploration and analysis. This requires certain Python packages that are not natively available on Amazon SageMaker to be installed on the notebook instance. How can a machine learning specialist ensure that required packages are automatically available on the notebook instance for the data scientist to use? Choices: Install AWS Systems Manager Agent on the underlying Amazon EC2 instance and use Systems Manager Automation to execute the package installation commands. Create a Jupyter notebook file (.ipynb) with cells containing the package installation commands to execute and place the file under the /etc/init directory of each Amazon SageMaker notebook instance. Use the conda package manager from within the Jupyter notebook console to apply the necessary conda packages to the default kernel of the notebook. Create an Amazon SageMaker lifecycle configuration with package installation commands and assign the lifecycle configuration to the notebook instance.', 'completion': '', 'test_cases': [], 'is_mcq': False, 'mcq_options': [], 'mcq_correct_letters': '', 'mcq_multi_select': False, 'is_invalid_sample': False}
2025-10-07 08:50:39 - DEBUG - [mlx_rl_trainer.rewards.content.semantic_similarity:79] - Content: Generated or reference text too short or empty. Returning 0.0.
2025-10-07 08:50:39 - DEBUG - [root:271] - {'prompt': 'In the context of Amazon Web Services Cloud, which of the following security tools monitors devices and records the information in a central database for further analysis? Choices: Antivirus, Host-based intrusion detection system (HIDS), Security orchestration automation and response, Endpoint detection and response (EDR).', 'completion': '', 'test_cases': [], 'is_mcq': False, 'mcq_options': [], 'mcq_correct_letters': '', 'mcq_multi_select': False, 'is_invalid_sample': False}
2025-10-07 08:50:39 - DEBUG - [mlx_rl_trainer.rewards.content.semantic_similarity:79] - Content: Generated or reference text too short or empty. Returning 0.0.
2025-10-07 08:50:39 - DEBUG - [root:271] - {'prompt': 'In the context of Amazon Web Services Cloud, which of the following security tools monitors devices and records the information in a central database for further analysis? Choices: Antivirus, Host-based intrusion detection system (HIDS), Security orchestration automation and response, Endpoint detection and response (EDR).', 'completion': '', 'test_cases': [], 'is_mcq': False, 'mcq_options': [], 'mcq_correct_letters': '', 'mcq_multi_select': False, 'is_invalid_sample': False}
2025-10-07 08:50:39 - DEBUG - [mlx_rl_trainer.rewards.content.semantic_similarity:79] - Content: Generated or reference text too short or empty. Returning 0.0.
2025-10-07 08:50:39 - WARNING - [root:577] - mlx-lm not available. Using mock logprob calculation.
2025-10-07 08:50:39 - CRITICAL - [root:308] - An unexpected error halted training: GRPOTrainer.train_step() missing 1 required positional argument: 'epoch'
Traceback (most recent call last):
  File "/Users/adeelahmad/work/themlx/mlx_rl_trainer/mlx_rl_trainer/src/mlx_rl_trainer/core/trainer.py", line 218, in run
    metrics = self.train_step(rollout_data, self.global_step)
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
TypeError: GRPOTrainer.train_step() missing 1 required positional argument: 'epoch'
2025-10-07 08:50:39 - INFO - [root:310] - Training process finalized. Saving final state.
2025-10-07 08:50:39 - CRITICAL - [mlx_rl_trainer.scripts.train:251] - An unexpected system error occurred: argument of type 'NoneType' is not iterable
Traceback (most recent call last):
  File "/Users/adeelahmad/work/themlx/mlx_rl_trainer/mlx_rl_trainer/src/mlx_rl_trainer/scripts/train.py", line 245, in _main_async
    await trainer.run()
  File "/Users/adeelahmad/work/themlx/mlx_rl_trainer/mlx_rl_trainer/src/mlx_rl_trainer/core/trainer.py", line 314, in run
    if hasattr(pbar, "postfix") and "Reward" in pbar.postfix
                                    ^^^^^^^^^^^^^^^^^^^^^^^^
TypeError: argument of type 'NoneType' is not iterable
2025-10-07 08:50:39 - INFO - [mlx_rl_trainer.scripts.train:254] - Application shutdown initiated.
2025-10-07 08:50:39 - INFO - [mlx_rl_trainer.monitoring.metrics_logger:82] - Metrics CSV logger opened: outputs/code_gen_run_001/training_metrics_52bc50e5-7295-42b7-b7b1-538c31291c2b.csv
2025-10-07 08:50:39 - INFO - [mlx_rl_trainer.monitoring.metrics_logger:200] - No substantial training_metrics.csv found; skipping plots.

{"prompt": "Generate a Python function to add two numbers.", "completion": "<think>Define function add_nums. Take a, b. Return a + b.</think><answer>```python\ndef add_nums(a, b):\n    return a + b\n```</answer>", "test_cases": [{"input": "add_nums(2, 3)", "expected": "5"}]}
{"prompt": "What is the capital of France?", "completion": "<think>France. Capital city. Paris.</think><answer>Paris</answer>", "test_cases": []}
{"prompt": "Explain the concept of recursion.", "completion": "<think>Recursion: function calls itself. Base case. Recursive step. Prevents infinite loop. Stack overflow risk.</think><answer>Recursion is a programming technique where a function calls itself to solve a problem. It relies on a base case to stop the recursion and a recursive step to reduce the problem into smaller subproblems. Without a proper base case, it can lead to infinite loops or stack overflow errors.</answer>", "test_cases": []}
{"prompt": "Solve 5 + 7 = ?", "completion": "<think>5 + 7. Sum. 12.</think><answer>12</answer>", "test_cases": []}
